{"version":3,"sources":["webpack://guillaume.sh/./src/pages/index.js","webpack://guillaume.sh/./src/utils/pluralize-reading-time.js"],"names":["data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","map","post","node","frontmatter","fields","slug","cover","getImage","key","style","marginBottom","rhythm","Link","to","date","pluralizeReadingTime","readingTime","minutes","items","categories","G","image","marginTop","alt","dangerouslySetInnerHTML","__html","description","excerpt","time","roundedTime","Math","max","round"],"mappings":"oNA2DA,UAhDkB,SAAC,GAAwB,IAAtBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAErC,OACE,gBAAC,IAAD,CAAQP,SAAUA,EAAUI,MAAOH,GACjC,gBAAC,IAAD,CAAKG,MAAM,YACX,gBAAC,IAAD,MACCC,EAAMG,KAAI,YAAqB,IAAZC,EAAW,EAAjBC,KACNN,EAAQK,EAAKE,YAAYP,OAASK,EAAKG,OAAOC,KAC9CC,GAAQC,OAASN,EAAKE,YAAYG,OACxC,OACE,2BAASE,IAAKP,EAAKG,OAAOC,KAAMI,MAAO,CAAEC,cAAcC,QAAO,KAC5D,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIZ,EAAKG,OAAOC,MAAOT,IAE/B,6BACGK,EAAKE,YAAYW,KADpB,aAGGC,OAAqBd,EAAKG,OAAOY,YAAYC,UAEhD,gBAAC,IAAD,CAAOC,MAAOjB,EAAKE,YAAYgB,aAC/B,gBAAC,EAAAP,KAAD,CAAMC,GAAIZ,EAAKG,OAAOC,MACpB,gBAAC,EAAAe,EAAD,CACEC,MAAOf,EACPG,MAAO,CAAEa,WAAWX,QAAO,IAAMD,cAAcC,QAAO,KACtDY,IAAI,kBAIV,+BACE,qBACEC,wBAAyB,CACvBC,OAAQxB,EAAKE,YAAYuB,aAAezB,EAAK0B,YAInD,yBACE,gBAAC,EAAAf,KAAD,CAAMC,GAAIZ,EAAKG,OAAOC,MAAtB,qB,kCClDC,SAASU,EAAqBa,GAC3C,IAAIC,EAAcC,KAAKC,IAAI,EAAGD,KAAKE,MAAMJ,IACzC,OAAUC,EAAV,KAAyBA,EAAc,EAAI,OAAS,OAApD,Q","file":"component---src-pages-index-js-73c41f27c018f02a49f2.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport MainBio from \"../components/main-bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Pills from \"../components/pills\"\nimport { rhythm } from \"../utils/typography\"\nimport pluralizeReadingTime from \"../utils/pluralize-reading-time\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Writing\" />\n      <MainBio />\n      {posts.map(({ node: post }) => {\n        const title = post.frontmatter.title || post.fields.slug\n        const cover = getImage(post.frontmatter.cover)\n        return (\n          <article key={post.fields.slug} style={{ marginBottom: rhythm(1) }}>\n            <header>\n              <h2>\n                <Link to={post.fields.slug}>{title}</Link>\n              </h2>\n              <small>\n                {post.frontmatter.date}\n                {` `}&middot;{` `}\n                {pluralizeReadingTime(post.fields.readingTime.minutes)}\n              </small>\n              <Pills items={post.frontmatter.categories} />\n              <Link to={post.fields.slug}>\n                <GatsbyImage\n                  image={cover}\n                  style={{ marginTop: rhythm(0.5), marginBottom: rhythm(0.5) }}\n                  alt=\"Cover image\"\n                />\n              </Link>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: post.frontmatter.description || post.excerpt,\n                }}\n              />\n            </section>\n            <p>\n              <Link to={post.fields.slug}>Read more</Link>\n            </p>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true }, kind: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n            readingTime {\n              minutes\n            }\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            categories\n            cover {\n              childImageSharp {\n                gatsbyImageData(layout: CONSTRAINED, height: 400, width: 600)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","export default function pluralizeReadingTime(time) {\n  let roundedTime = Math.max(1, Math.round(time))\n  return `${roundedTime} ${roundedTime > 1 ? \"mins\" : \"min\"} read`\n}\n"],"sourceRoot":""}